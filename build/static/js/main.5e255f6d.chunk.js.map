{"version":3,"sources":["Phonebook.js","services/phonebookService.js","App.js","index.js"],"names":["PhonebookEntry","data","removeHandler","name","number","onClick","Phonebook","persons","filterValue","filter","toLowerCase","includes","map","person","baseUrl","exportedObject","getAll","axios","get","then","response","addEntry","newEntry","post","removeEntry","id","delete","updateEntry","newData","put","PersonForm","submitHandler","nameHandler","numberHandler","newName","newNumber","onSubmit","value","onChange","type","Filter","filterHandler","Alert","message","alertStyle","background","fontSize","borderStyle","borderRadius","padding","marginBottom","color","style","App","useState","setPersons","setNewName","setNewNumber","setFilterValue","alert","setAlert","useEffect","pbService","personList","event","target","preventDefault","window","newPerson","existingPerson","p","length","confirm","updatedEntry","setTimeout","catch","error","concat","console","log","status","headers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e255f6d.chunk.js","sourcesContent":["const Phonebook = ({persons, filterValue, removeHandler}) => {\r\n    return(\r\n      <>{\r\n        persons\r\n        .filter(({name}) =>  name.toLowerCase().includes(filterValue))\r\n        .map((person) => <PhonebookEntry key={person.name} data={person} removeHandler={removeHandler}/>)\r\n      }</>\r\n      \r\n    )\r\n  }\r\n  \r\nconst PhonebookEntry = ({data, removeHandler}) => {\r\nreturn(\r\n    <ul> {data.name} | {data.number} <button onClick={() => removeHandler(data)}>remove</button></ul> \r\n)\r\n}\r\n\r\nexport default Phonebook;","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const req = axios.get(baseUrl)\r\n    return req.then(response => response.data)\r\n}\r\n\r\nconst addEntry = (newEntry) => {\r\n    const req = axios.post(baseUrl, newEntry)\r\n    return req.then(response => response.data)\r\n}\r\n\r\nconst removeEntry = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst updateEntry = (id, newData) => {\r\n    const req = axios.put(`${baseUrl}/${id}`, newData)\r\n    return req.then(response => response.data)\r\n}\r\n\r\nconst exportedObject = { getAll, addEntry, removeEntry, updateEntry }\r\nexport default exportedObject","import React, { useState, useEffect } from 'react'\r\nimport Phonebook from './Phonebook'\r\nimport pbService from './services/phonebookService'\r\n\r\nconst PersonForm = ({submitHandler, nameHandler, numberHandler, newName, newNumber}) => {\r\n  return(\r\n    <form onSubmit={submitHandler}>\r\n        <div> Name: <input value={newName} onChange={nameHandler}/> </div>\r\n        <div> Number: <input value={newNumber} onChange={numberHandler}/> </div>\r\n        <div> <button type=\"submit\">add</button>  </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nconst Filter = ({filterHandler}) => {\r\n  return(<>Filter by name: <input onChange={filterHandler}/></>)\r\n}\r\n\r\n\r\n\r\nconst Alert = ({message, type}) => {\r\n  \r\n  let alertStyle = {\r\n    background: 'lightgrey',\r\n    fontSize: 20,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  }\r\n\r\n  if (type === 'success') alertStyle = {...alertStyle, color: 'green'}\r\n  if (type === 'error') alertStyle = {...alertStyle, color: 'red'}\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return(\r\n    <div style={alertStyle}>{message}</div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filterValue, setFilterValue] = useState('')\r\n  const [ alert, setAlert ] = useState({message: null, type: null})\r\n\r\n  //Fetches phonebook data from json-server using the phonebook service and the Effect Hook\r\n  useEffect(() => {\r\n    pbService\r\n      .getAll()\r\n      .then(personList => {setPersons(personList)})\r\n  }, [])\r\n  \r\n  // Reads input name and updates its corresponding state\r\n  const handleName = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  // Reads input phone number and updates its corresponding state\r\n  const handleNumber = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  // Reads filter input and updates its corresponding state\r\n  const handleFilter = (event) => {\r\n    setFilterValue(event.target.value.toLowerCase())\r\n  }\r\n\r\n  // Removes person from server and from front end\r\n  const handleRemoveButton = (data) => {\r\n    if (window.confirm(`Delete ${data.name}?`)){\r\n      pbService\r\n        .removeEntry(data.id)\r\n        .then(() => {\r\n          setPersons(persons.filter(p => p.name !== data.name))\r\n          setAlert({ message: `${data.name} has been removed from the phonebook.`, type: 'success'})\r\n          setTimeout(() => setAlert({message: null, type: null}), 5000)\r\n        })\r\n        .catch(error => {\r\n          console.log(error.response.status)\r\n          console.log(error.response.headers)\r\n          setAlert({ \r\n            message: `The entry couldn't be deleted. It may not be in the server anymore. Error code ${error.response.status}`, \r\n            type: 'error' })\r\n          setTimeout(() => setAlert({message: null, type: null}), 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n  // Form Submit handler, adds the current newName and newPhone to the list of persons\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n\r\n    //Checks for empty input values\r\n    if (newName === '') {\r\n      window.alert(\"Name field is empty.\")\r\n      return(null)\r\n    }\r\n    if (newNumber === '') {\r\n      window.alert(\"Phone field is empty.\")\r\n      return(null)\r\n    }\r\n\r\n    //Creates the new person data object\r\n    const newPerson = {\r\n      name: newName,\r\n      number: newNumber\r\n    } \r\n\r\n    //Detects duplicate name and asks the user if it wants to update the number\r\n    const existingPerson = persons.filter((p) => p.name===newName)\r\n    if ( existingPerson.length > 0 ){\r\n      const update = window.confirm(`${newName} is already on the phonebook, replace the old number with a new one?`)\r\n      if (update){\r\n        pbService\r\n          .updateEntry(existingPerson[0].id, newPerson)\r\n          .then(updatedEntry => {\r\n            setPersons(persons.map(p => p.id !== updatedEntry.id ? p : updatedEntry))\r\n            setNewName('')\r\n            setNewNumber('')\r\n            setAlert({ message: `${newPerson.name}'s number has been updated.`, type:'success' })\r\n            setTimeout(() => setAlert({message: null, type: null}), 5000)\r\n          })\r\n          .catch(error => {\r\n            setAlert({ message: `Information of ${newPerson.name} has already been removed from server.`, type: 'error' })\r\n            setPersons(persons.filter(p => p.name !== newPerson.name))\r\n            setTimeout(() => setAlert({message: null, type: null}), 5000)\r\n          })\r\n      }\r\n    } else {\r\n      \r\n      //Saves data to server using the phonebook service and clears input form state\r\n      pbService\r\n        .addEntry(newPerson)\r\n        .then(newEntry => {\r\n          setPersons(persons.concat(newEntry))\r\n          setNewName('')\r\n          setNewNumber('')\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Alert message={alert.message} type={alert.type} />\r\n      <Filter filterHandler={handleFilter} />\r\n\r\n      <h3>Add a new person:</h3>\r\n      <PersonForm submitHandler={addPerson} newName={newName} newNumber={newNumber} nameHandler={handleName} numberHandler={handleNumber} />\r\n\r\n      <h3>Numbers</h3>\r\n      <Phonebook persons={persons} removeHandler={handleRemoveButton} filterValue={filterValue} />\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}